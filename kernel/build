#!/bin/bash
CADMIUMROOT=$1

[ -z "$CADMIUMROOT" ] && echo "$0: First parameter has to be root dir of Cadmium" && exit 1

set -e

[ -z "$TARGET" ] && source $CADMIUMROOT/config

# set env vars
export ARCH=arm64
export CROSS_COMPILE=aarch64-linux-gnu-

mkdir -p tmp
cd $CADMIUMROOT/tmp


# check if kernel has been downloaded this week, if not download/update it
if [ "$(date +'%V%y')" != "$(cat kern-dl-date-$TARGET)" ]; then
	echo "Downloading kernel for $TARGET"
	rm -rf linux-$TARGET

	case "$TARGET" in
		duet) # <-- i feel bad about this
			# we don't want to redownload repo
			if [ -d linux-duet ]; then
				cd linux-duet
				git pull
			else
				git clone https://github.com/Maccraft123/linux --depth 1 --single-branch -b master linux-duet
			fi		
		;;
		
		*)
			#curl -L "$(curl -sL https://www.kernel.org/ | grep "Download complete tarball" | head -n1 | tr '"' ' ' | awk '{print $3}')" -o Linux-archive
			curl -L https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.10.3.tar.xz -o Linux-archive
			mkdir linux-$TARGET
			bsdtar xf Linux-archive --strip-components=1 -C linux-$TARGET
			echo $(date +'%V%y') > kern-dl-date-$TARGET

			cd linux-$TARGET

			for x in $(ls $CADMIUMROOT/board/$TARGET/patches/*.patch); do
			echo "Applying $x"
				patch -p1 < $x
			done
		;;
	esac	
fi

cd $CADMIUMROOT/tmp/linux-$TARGET

# TODO:
# make cadmium defconfig from: common-defconfig, soc-defconfig and board-defconfig
[ -f .config ] || cp $CADMIUMROOT/board/$TARGET/kernel-config .config
cp $CADMIUMROOT/board/$TARGET/kernel.its kernel.its
cp $CADMIUMROOT/kernel/cmdline cmdline

#make nconfig # if you want to customize config just uncomment this

echo Bulding in $(pwd) with $(nproc) threads
time make -j$(nproc)
make tarxz-pkg

REL="$(make kernelrelease)"

# make kernel partition
# yes this is stolen from solidhal's prawnos, that's how open source works :D
mkimage -D "-I dts -O dtb -p 2048" -f kernel.its vmlinux.uimg || true
dd if=/dev/zero of=bootloader.bin bs=512 count=1
vbutil_kernel --pack vmlinux.kpart \
	--version 1 \
	--vmlinuz vmlinux.uimg \
	--arch aarch64 \
	--keyblock /usr/share/vboot/devkeys/kernel.keyblock \
	--signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk \
	--config cmdline \
	--bootloader bootloader.bin
rm vmlinux.uimg

cp vmlinux.kpart $CADMIUMROOT/

# clean the tree, just in case
rm -rf $CADMIUMROOT/tmp/kernel-repack
mkdir -p $CADMIUMROOT/tmp/kernel-repack/

# by default make tarxz-pkg doesn't include vmlinux.kpart, add it manually
bsdtar xf $CADMIUMROOT/tmp/linux-$TARGET/linux-*cadmium*.tar.xz  -C $CADMIUMROOT/tmp/kernel-repack
cp $CADMIUMROOT/vmlinux.kpart $CADMIUMROOT/tmp/kernel-repack/boot/vmlinux.kpart
cp $CADMIUMROOT/tmp/linux-$TARGET/arch/arm64/boot/Image $CADMIUMROOT/tmp/kernel-repack/boot/Image-$TARGET

# put release info for script on target machine to compare its uname -r to
echo "$REL" > $CADMIUMROOT/tmp/kernel-repack/release

# and add target information
echo "$TARGET" > $CADMIUMROOT/tmp/kernel-repack/target

# make archive *including* vmlinux.kpart
tar cJf $CADMIUMROOT/kernel-$TARGET.tar.xz -C $CADMIUMROOT/tmp kernel-repack

# checksum to be 100% sure on target device that file downloaded correctly
sha1sum $CADMIUMROOT/kernel-$TARGET.tar.xz | awk '{print $1}' > $CADMIUMROOT/kernel-$TARGET.sha1

