#!/bin/bash
CADMIUMROOT=$1

[ -z "$CADMIUMROOT" ] && echo "$0: First parameter has to be root dir of Cadmium" && exit 1

set -e

[ -z "$TARGET" ] && source $CADMIUMROOT/config

source $CADMIUMROOT/board/$TARGET/boardinfo
source $CADMIUMROOT/baseboard/$BASEBOARD/boardinfo

mkdir -p tmp
cd $CADMIUMROOT/tmp


# check if kernel has been downloaded this week, if not download/update it
if [ "$(date +'%V%y') $KERNEL" != "$(cat kern-dl-date-$TARGET)" ]; then
	echo "Downloading kernel for $TARGET"
	rm -rf linux-$TARGET

	case "$KERNEL" in # TODO: cros kernel for blob tracing?
		testing) # <-- HACK
			case "$TARGET" in
				duet)
					# we don't want to redownload repo
					if [ -d linux-$TARGET ]; then
						cd linux-$TARGET
						git pull
					else
						git clone https://github.com/Maccraft123/linux --depth 1 --single-branch -b master linux-$TARGET
					fi
					echo "$(date +'%V%y') $KERNEL" > $CADMIUMROOT/tmp/kern-dl-date-$TARGET
				;;
				*)
					echo "testing kernel is unsupported for $TARGET"
					exit 1
				;;
			esac	
		;;
		
		stable)
			if [ "$TARGET" = "duet" ]; then #      -.-
				curl -L https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.10.19.tar.xz -o Linux-archive
			else
				curl -L "$(curl -sL https://www.kernel.org/ | grep "Download complete tarball" | head -n1 | tr '"' ' ' | awk '{print $3}')" -o Linux-archive
			fi
			mkdir linux-$TARGET
			bsdtar xf Linux-archive --strip-components=1 -C linux-$TARGET
			echo "$(date +'%V%y') $KERNEL" > kern-dl-date-$TARGET

			cd linux-$TARGET

			for x in $(ls $CADMIUMROOT/board/$TARGET/patches/*.patch); do
				echo "Applying $x"
				patch -p1 --forward < $x || true
			done
		;;
	esac	
fi

cd $CADMIUMROOT/tmp/linux-$TARGET

if [ $TARGET = duet ]; then
	patch -p1 --forward < $CADMIUMROOT/kernel/patches/android-enable-building-ashmem-and-binder-as-modules.patch || true
	patch -p1 --forward < $CADMIUMROOT/kernel/patches/export-symbols-needed-by-android-drivers.patch || true
else
	patch -p1 --forward < $CADMIUMROOT/kernel/patches/android-enable-building-ashmem-and-binder-as-modules.patch || true
	patch -p1 --forward < $CADMIUMROOT/kernel/patches/export-symbols-needed-by-android-drivers.patch.alt || true
fi

#for x in $(ls $CADMIUMROOT/kernel/patches/*.patch); do
#	echo "Applying $x"
#	patch -p1 --forward < $x || true
#done

# TODO:
# make cadmium defconfig from: common-defconfig, soc-defconfig and board-defconfig
[ -f .config ] || cp $CADMIUMROOT/board/$TARGET/kernel-config .config
cp $CADMIUMROOT/kernel/cmdline cmdline

#make nconfig # if you want to customize config just uncomment this

echo Bulding $KERNEL kernel for $BASEBOARD/$TARGET/$ARCH in $(pwd) with $(nproc) threads using $CROSS_COMPILE
time make -j$(nproc)
make tarxz-pkg

REL="$(make kernelrelease)"

# this below should go to separate script

# clean the tree, just in case
#rm -rf $CADMIUMROOT/tmp/kernel-repack
#mkdir -p $CADMIUMROOT/tmp/kernel-repack/

# by default make tarxz-pkg doesn't include vmlinux.kpart, add it manually
#bsdtar xf $CADMIUMROOT/tmp/linux-$TARGET/linux-*cadmium*.tar.xz  -C $CADMIUMROOT/tmp/kernel-repack
#cp $CADMIUMROOT/vmlinux.kpart $CADMIUMROOT/tmp/kernel-repack/boot/vmlinux.kpart
#cp $CADMIUMROOT/tmp/linux-$TARGET/arch/$ARCH/boot/Image $CADMIUMROOT/tmp/kernel-repack/boot/Image-$TARGET #FIXME: armv7 has image in this place too?

# put release info for script on target machine to compare its uname -r to
#echo "$REL" > $CADMIUMROOT/tmp/kernel-repack/release

# and add target information
#echo "$TARGET" > $CADMIUMROOT/tmp/kernel-repack/target

# make archive *including* vmlinux.kpart
#tar cJf $CADMIUMROOT/kernel-$TARGET.tar.xz -C $CADMIUMROOT/tmp kernel-repack

# checksum to be 100% sure on target device that file downloaded correctly
#sha1sum $CADMIUMROOT/kernel-$TARGET.tar.xz | awk '{print $1}' > $CADMIUMROOT/kernel-$TARGET.sha1

