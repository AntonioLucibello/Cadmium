#!/bin/bash
CADMIUMROOT=$1

[ -z "$CADMIUMROOT" ] && echo "$0: First parameter has to be root dir of Cadmium" && exit 1

set -e

[ -z "$TARGET" ] && source $CADMIUMROOT/config

source $CADMIUMROOT/board/$TARGET/boardinfo
source $CADMIUMROOT/baseboard/$BASEBOARD/boardinfo

mkdir -p tmp
cd $CADMIUMROOT/tmp


# check if kernel has been downloaded this week, if not download/update it
if [ "$(date +'%V%y') $KERNEL" != "$(cat kern-dl-date-$TARGET)" ]; then
	echo "Downloading kernel for $TARGET"
	rm -rf linux-$TARGET

	if [ "$TARGET" = "duet" ]; then #      -.-
		curl -L https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.10.22.tar.xz -o Linux-archive
	else
		curl -L "$(curl -sL https://www.kernel.org/ | grep "Download complete tarball" | head -n1 | tr '"' ' ' | awk '{print $3}')" -o Linux-archive
	fi
	mkdir linux-$TARGET
	bsdtar xf Linux-archive --strip-components=1 -C linux-$TARGET
	echo "$(date +'%V%y') $KERNEL" > kern-dl-date-$TARGET

	cd linux-$TARGET

	for x in $(ls $CADMIUMROOT/board/$TARGET/patches/*.patch); do
		echo "Applying $x"
		patch -p1 --forward < $x || true
	done
fi

cd $CADMIUMROOT/tmp/linux-$TARGET

# TODO: this is probably wrong
if [ $TARGET = duet ]; then
	patch -p1 --forward < $CADMIUMROOT/kernel/patches/android-enable-building-ashmem-and-binder-as-modules.patch || true
	patch -p1 --forward < $CADMIUMROOT/kernel/patches/export-symbols-needed-by-android-drivers.patch || true
else
	patch -p1 --forward < $CADMIUMROOT/kernel/patches/android-enable-building-ashmem-and-binder-as-modules.patch || true
	patch -p1 --forward < $CADMIUMROOT/kernel/patches/export-symbols-needed-by-android-drivers.patch.alt || true
fi

#for x in $(ls $CADMIUMROOT/kernel/patches/*.patch); do
#	echo "Applying $x"
#	patch -p1 --forward < $x || true
#done

# TODO:
# make cadmium defconfig from: common-defconfig, soc-defconfig and board-defconfig
[ -f .config ] || cp $CADMIUMROOT/board/$TARGET/kernel-config .config
cp $CADMIUMROOT/kernel/cmdline cmdline

#make nconfig # if you want to customize config just uncomment this

echo Bulding $KERNEL kernel for $BASEBOARD/$TARGET/$ARCH in $(pwd) with $(nproc) threads using $CROSS_COMPILE
time make -j$(nproc)

make tarxz-pkg
